% Autogenerated with DRAKON Editor 1.30

-module(udh_parser).
-export([split/1, unsplit/2]).

split(Bin) ->
    case Bin of
        <<5, 0, 3, R:8, C:8, N:8, Rest/binary>> ->
            % item 31
            {#{bit => 8, len => 5, info_elm_id => 0,
               hdr_len => 3, msg_ref_num => R,
               total_segments => C,
               segment_seqnum => N},
            Rest}
        ;
        [5, 0, 3, R, C, N | Rest] ->
            % item 30
            {#{bit => 8, len => 5, info_elm_id => 0,
               hdr_len => 3, msg_ref_num => R,
               total_segments => C,
               segment_seqnum => N},
            Rest}
        ;
        <<6, 8, 4, R:16, C:8, N:8, Rest/binary>> ->
            % item 29
            {#{bit => 16, len => 6, info_elm_id => 8,
               hdr_len => 4,
               msg_ref_num => R, total_segments => C,
               segment_seqnum => N},
            Rest}
        ;
        [6, 8, 4, RH, RL, C, N | Rest] ->
            % item 28
            {#{bit => 16, len => 6, info_elm_id => 8,
               hdr_len => 4,
               msg_ref_num => [RH, RL],
               total_segments => C, segment_seqnum => N},
            Rest}
        ;
        Bin ->
            % item 27
            {#{}, Bin}
    end
.

unsplit(Pdu, SM) ->
    case Pdu of
        #{<<"bit">> := 8, <<"len">> := 5,
   <<"info_elm_id">> := 0,
   <<"hdr_len">> := 3,
   <<"msg_ref_num">> := R,
   <<"total_segments">> := C, 
   <<"segment_seqnum">> := N} ->
            % item 45
            case is_list(SM) of true -> 
                % item 48
                [5, 0, 3, R, C, N | SM]
            ; false ->
                % item 49
                <<5, 0, 3, R:8, C:8, N:8, SM/binary>>
            end
        ;
        #{bit := 8, len := 5, info_elm_id := 0,
   hdr_len := 3, msg_ref_num := R,
   total_segments := C,
   segment_seqnum := N} ->
            % item 50
            case is_list(SM) of true -> 
                % item 51
                [5, 0, 3, R, C, N | SM]
            ; false ->
                % item 52
                <<5, 0, 3, R:8, C:8, N:8, SM/binary>>
            end
        ;
        #{<<"bit">> := 16, <<"len">> := 6,
  <<"info_elm_id">> := 8,
  <<"hdr_len">> := 4,
  <<"msg_ref_num">> := R,
  <<"total_segments">> := C,
  <<"segment_seqnum">> := N} ->
            % item 54
            case is_list(SM) of true -> 
                % item 55
                lists:flatten([6, 8, 4, R, C, N | SM])
            ; false ->
                % item 56
                <<6, 8, 4, R:16, C:8, N:8, SM/binary>>
            end
        ;
        #{bit := 16, len := 6,
  info_elm_id := 8,
  hdr_len := 4,
  msg_ref_num := R,
  total_segments := C,
  segment_seqnum := N} ->
            % item 59
            case is_list(SM) of true -> 
                % item 61
                lists:flatten([6, 8, 4, R, C, N | SM])
            ; false ->
                % item 62
                <<6, 8, 4, R:16, C:8, N:8, SM/binary>>
            end
    end
.


